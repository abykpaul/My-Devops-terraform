pipeline {
  agent any

  parameters {
    choice(name: 'ENV', choices: ['dev', 'prod'], description: 'Choose environment')
    booleanParam(name: 'DESTROY', defaultValue: false, description: 'Destroy infrastructure?')
  }

  environment {
    AWS_REGION = 'ap-south-1'
    TFVARS_FILE = "${params.ENV}.tfvars"
    MODULE_DIR = "jenkins-aws-modules-terra"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'release/terraform_demo', url: 'https://github.com/abykpaul/Terraform-Aws-Jenkins-Mig.git'
      }
    }

    stage('Terraform Init') {
      steps {
        dir("${MODULE_DIR}") {
          withAWS(credentials: 'aws-creds', region: "${AWS_REGION}") {
            bat "terraform init -backend-config=${params.ENV}.backend.tfvars"
          }
        }
      }
    }

    stage('Terraform Plan') {
      steps {
        dir("${MODULE_DIR}") {
          withAWS(credentials: 'aws-creds', region: "${AWS_REGION}") {
            bat "terraform plan -var-file=${TFVARS_FILE} -out=tfplan.out"
          }
        }
      }
    }

    stage('Terraform Apply / Destroy') {
      steps {
        dir("${MODULE_DIR}") {
          input message: "Proceed with ${params.DESTROY ? 'Destroy' : 'Apply'}?"
          withAWS(credentials: 'aws-creds', region: "${AWS_REGION}") {
            script {
              if (params.DESTROY) {
                bat "terraform destroy -auto-approve -var-file=${TFVARS_FILE}"
              } else {
                bat "terraform apply -auto-approve tfplan.out"
              }
            }
          }
        }
      }
    }
  }
}
